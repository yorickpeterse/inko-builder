import std.test.Tests
import builder.html.(Document, Element)

fn pub tests(t: mut Tests) {
  t.test('Document.new') fn (t) {
    let doc = Document.new

    t.true(doc.doctype)
  }

  t.test('Document.fragment') fn (t) {
    let doc = Document.fragment

    t.false(doc.doctype)
  }

  t.test('Document.html') fn (t) {
    let doc = Document.html('en') fn (h) {}

    t.equal(doc.to_string, '<!DOCTYPE html><html lang="en"></html>')
  }

  t.test('Document.to_string with an empty document') fn (t) {
    t.equal(Document.new.to_string, '<!DOCTYPE html>')
  }

  t.test('Document.to_string with an empty document fragment') fn (t) {
    t.equal(Document.fragment.to_string, '')
  }

  t.test('Document.to_string') fn (t) {
    let doc = Document.html('en') fn (html) {
      html.head.with fn (head) {
        head.title.text('Testing')
        head.link.attr('href', 'foo')
      }

      html.body.with fn (body) {
        body.p.with fn (p) {
          p.text('hello')
          p.strong.text('world')
        }
      }
    }

    t.equal(
      doc.to_string,
      '\
<!DOCTYPE html>\
<html lang="en">\
<head>\
<title>Testing</title>\
<link href="foo" />\
</head>\
<body>\
<p>hello<strong>world</strong></p>\
</body>\
</html>\
'
    )
  }

  t.test('Document.to_pretty_string') fn (t) {
    let doc = Document.html('en') fn (html) {
      html.head.with fn (head) {
        head.title.text('Testing')
        head.link.attr('href', 'foo')
      }

      html.body.with fn (body) {
        body.p.with fn (p) {
          p.text('hello')
          p.strong.text('world')
        }
      }
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Testing</title>
    <link href="foo" />
  </head>
  <body>
    <p>hello<strong>world</strong></p>
  </body>
</html>
'
    )
  }

  t.test('Document.to_pretty_string with two root elements') fn (t) {
    let doc = Document.new

    doc.h1.text('foo')
    doc.p.text('bar')

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<h1>foo</h1>
<p>bar</p>
'
    )
  }

  t.test('Document.to_pretty_string with multiple text nodes') fn (t) {
    let doc = Document.new
    let p = doc.p

    p.text('foo ')
    p.text('bar')

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<p>foo bar</p>
'
    )
  }

  t.test('Document.to_pretty_string with multiple text nodes with newlines') fn (t) {
    let doc = Document.new
    let p = doc.p

    p.text("foo\n")
    p.text("bar\n")

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<p>foo
bar
</p>
'
    )
  }

  t.test('Document.to_pretty_string with multiple text nodes and an element') fn (t) {
    let doc = Document.new
    let p = doc.p

    p.text('foo ')
    p.text('bar')
    p.strong.text('test')

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<p>foo bar<strong>test</strong></p>
'
    )
  }

  t.test('Document.to_pretty_string with inline and block elements, and text') fn (t) {
    let doc = Document.new

    doc.body.with fn (body) {
      body.p.with fn (p) {
        p.text('foo')
        p.strong.text('bar')
        p.text('baz')
      }

      body.text('bla')
      body.ul.with fn (ul) {
        ul.strong.text('list start')
        ul.li.text('foo')
        ul.li.with fn (li) {
          li.text('bar')
          li.text(' bar')
          li.strong.text('inline')

          li.ul.with fn (ul) {
            ul.text('before')
            ul.li.text('baz')
            ul.text('after')
          }
        }
      }
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<body>
  <p>foo<strong>bar</strong>baz</p>
  bla
  <ul>
    <strong>list start</strong>
    <li>foo</li>
    <li>
      bar bar<strong>inline</strong>
      <ul>
        before
        <li>baz</li>
        after
      </ul>
    </li>
  </ul>
</body>
'
    )
  }

  t.test('Document.to_pretty_string with a hr followed by a heading, at the top') fn (t) {
    let doc = Document.new

    doc.hr
    doc.h1.text('hello')
    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<hr />
<h1>hello</h1>
'
    )
  }

  t.test('Document.to_pretty_string with a hr followed by a heading') fn (t) {
    let doc = Document.new

    doc.div.with fn (div) {
      div.hr
      div.h1.text('hello')
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<div>
  <hr />
  <h1>hello</h1>
</div>
'
    )
  }

  t.test('Document.to_string with text to escape') fn (t) {
    let doc = Document.new

    doc.p.text('&><')
    t.equal(doc.to_string, '<!DOCTYPE html><p>&amp;&gt;&lt;</p>')
  }

  t.test('Document.to_string with attribute values characters to escape') fn (t) {
    let doc = Document.new

    doc.p.attr('foo', 'a"b')
    t.equal(doc.to_string, '<!DOCTYPE html><p foo="a&quot;b"></p>')
  }

  t.test('Document.to_string without a doctype') fn (t) {
    let doc = Document.fragment

    doc.p.text('foo')
    t.equal(doc.to_string, '<p>foo</p>')
  }

  t.test('Builder.h1') fn (t) {
    let doc = Document.new

    doc.h1.text('foo')
    t.equal(doc.to_string, '<!DOCTYPE html><h1>foo</h1>')
  }

  t.test('Builder.h2') fn (t) {
    let doc = Document.new

    doc.h2.text('foo')
    t.equal(doc.to_string, '<!DOCTYPE html><h2>foo</h2>')
  }

  t.test('Builder.h3') fn (t) {
    let doc = Document.new

    doc.h3.text('foo')
    t.equal(doc.to_string, '<!DOCTYPE html><h3>foo</h3>')
  }

  t.test('Builder.h4') fn (t) {
    let doc = Document.new

    doc.h4.text('foo')
    t.equal(doc.to_string, '<!DOCTYPE html><h4>foo</h4>')
  }

  t.test('Builder.h5') fn (t) {
    let doc = Document.new

    doc.h5.text('foo')
    t.equal(doc.to_string, '<!DOCTYPE html><h5>foo</h5>')
  }

  t.test('Builder.h6') fn (t) {
    let doc = Document.new

    doc.h6.text('foo')
    t.equal(doc.to_string, '<!DOCTYPE html><h6>foo</h6>')
  }

  t.test('Builder.text') fn (t) {
    let doc = Document.new

    doc.p.attr('class', 'b').text('a')
    t.equal(doc.to_string, '<!DOCTYPE html><p class="b">a</p>')
  }

  t.test('Builder.append') fn (t) {
    let doc1 = Document.fragment
    let doc2 = Document.fragment

    doc1.p.text('test')
    doc2.div.append(doc1)
    t.equal(doc2.to_string, '<div><p>test</p></div>')
  }

  t.test('Element.take_nodes') fn (t) {
    let div = Element.new('div')

    div.p.text('hello')

    t.equal(div.take_nodes.size, 1)
    t.true(div.nodes.empty?)
  }
}
