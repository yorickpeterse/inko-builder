import std.test.Tests
import builder.html.Document

fn pub tests(t: mut Tests) {
  t.test('Document.to_string') fn (t) {
    let doc = Document.with fn (doc) {
      doc.html.then fn (html) {
        html.head.then fn (head) {
          head.title.text('Testing')
          head.link.attr('href', 'foo')
        }

        html.body.then fn (body) {
          body.p.then fn (p) {
            p.text('hello')
            p.strong.text('world')
          }
        }
      }
    }

    t.equal(
      doc.to_string,
      '\
<!DOCTYPE html>\
<html>\
<head>\
<title>Testing</title>\
<link href="foo" />\
</head>\
<body>\
<p>hello<strong>world</strong></p>\
</body>\
</html>\
'
    )
  }

  t.test('Document.to_pretty_string') fn (t) {
    let doc = Document.with fn (doc) {
      doc.html.then fn (html) {
        html.head.then fn (head) {
          head.title.text('Testing')
          head.link.attr('href', 'foo')
        }

        html.body.then fn (body) {
          body.p.then fn (p) {
            p.text('hello')
            p.strong.text('world')
          }
        }
      }
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<html>
  <head>
    <title>Testing</title>
    <link href="foo" />
  </head>
  <body>
    <p>hello<strong>world</strong></p>
  </body>
</html>
'
    )
  }

  t.test('Document.to_pretty_string with two root elements') fn (t) {
    let doc = Document.with fn (doc) {
      doc.h1.text('foo')
      doc.p.text('bar')
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<h1>foo</h1>
<p>bar</p>
'
    )
  }

  t.test('Document.to_pretty_string with multiple text nodes') fn (t) {
    let doc = Document.with fn (doc) {
      let p = doc.p

      p.text('foo ')
      p.text('bar')
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<p>foo bar</p>
'
    )
  }

  t.test('Document.to_pretty_string with multiple text nodes with newlines') fn (t) {
    let doc = Document.with fn (doc) {
      let p = doc.p

      p.text("foo\n")
      p.text("bar\n")
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<p>foo
bar
</p>
'
    )
  }

  t.test('Document.to_pretty_string with multiple text nodes and an element') fn (t) {
    let doc = Document.with fn (doc) {
      let p = doc.p

      p.text('foo ')
      p.text('bar')
      p.strong.text('test')
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<p>foo bar<strong>test</strong></p>
'
    )
  }

  t.test('Document.to_pretty_string with inline and block elements, and text') fn (t) {
    let doc = Document.with fn (doc) {
      doc.body.then fn (body) {
        body.p.then fn (p) {
          p.text('foo')
          p.strong.text('bar')
          p.text('baz')
        }

        body.text('bla')
        body.ul.then fn (ul) {
          ul.strong.text('list start')
          ul.li.text('foo')
          ul.li.then fn (li) {
            li.text('bar')
            li.text(' bar')
            li.strong.text('inline')

            li.ul.then fn (ul) {
              ul.text('before')
              ul.li.text('baz')
              ul.text('after')
            }
          }
        }
      }
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<body>
  <p>foo<strong>bar</strong>baz</p>
  bla
  <ul>
    <strong>list start</strong>
    <li>foo</li>
    <li>
      bar bar<strong>inline</strong>
      <ul>
        before
        <li>baz</li>
        after
      </ul>
    </li>
  </ul>
</body>
'
    )
  }

  t.test('Document.to_pretty_string with a hr followed by a heading, at the top') fn (t) {
    let doc = Document.with fn (doc) {
      doc.hr
      doc.h1.text('hello')
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<hr />
<h1>hello</h1>
'
    )
  }

  t.test('Document.to_pretty_string with a hr followed by a heading') fn (t) {
    let doc = Document.with fn (doc) {
      doc.div.then fn (div) {
        div.hr
        div.h1.text('hello')
      }
    }

    t.equal(
      doc.to_pretty_string,
      '\
<!DOCTYPE html>
<div>
  <hr />
  <h1>hello</h1>
</div>
'
    )
  }

  t.test('Document.to_string with text to escape') fn (t) {
    let doc = Document.with fn (doc) { doc.p.text('&><') }

    t.equal(doc.to_string, '<!DOCTYPE html><p>&amp;&gt;&lt;</p>')
  }

  t.test('Document.to_string with attribute values characters to escape') fn (t) {
    let doc = Document.with fn (doc) { doc.p.attr('foo', 'a"b') }

    t.equal(doc.to_string, '<!DOCTYPE html><p foo="a&quot;b"></p>')
  }

  t.test('Document.to_string without a doctype') fn (t) {
    let doc = Document.with fn (doc) { doc.p.text('foo') }

    doc.fragment = true
    t.equal(doc.to_string, '<p>foo</p>')
  }

  t.test('Builder.h1') fn (t) {
    let doc = Document.with fn (doc) { doc.h1.text('foo') }

    t.equal(doc.to_string, '<!DOCTYPE html><h1>foo</h1>')
  }

  t.test('Builder.h2') fn (t) {
    let doc = Document.with fn (doc) { doc.h2.text('foo') }

    t.equal(doc.to_string, '<!DOCTYPE html><h2>foo</h2>')
  }

  t.test('Builder.h3') fn (t) {
    let doc = Document.with fn (doc) { doc.h3.text('foo') }

    t.equal(doc.to_string, '<!DOCTYPE html><h3>foo</h3>')
  }

  t.test('Builder.h4') fn (t) {
    let doc = Document.with fn (doc) { doc.h4.text('foo') }

    t.equal(doc.to_string, '<!DOCTYPE html><h4>foo</h4>')
  }

  t.test('Builder.h5') fn (t) {
    let doc = Document.with fn (doc) { doc.h5.text('foo') }

    t.equal(doc.to_string, '<!DOCTYPE html><h5>foo</h5>')
  }

  t.test('Builder.h6') fn (t) {
    let doc = Document.with fn (doc) { doc.h6.text('foo') }

    t.equal(doc.to_string, '<!DOCTYPE html><h6>foo</h6>')
  }

  t.test('Builder.text') fn (t) {
    let doc = Document.with fn (doc) { doc.p.text('a').attr('class', 'b') }

    t.equal(doc.to_string, '<!DOCTYPE html><p class="b">a</p>')
  }
}
