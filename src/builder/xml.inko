# Generating of XML documents and elements.
import std.string (StringBuffer, ToString)

let QUOTE = 34
let AMP = 38
let SEMI = 59
let LT = 60
let GT = 62

# Escapes any XML/HTML entities in the input `String`.
fn escape(input: String, quotes: Bool) -> String {
  if escape?(input, quotes).false? { return input }

  let buf = ByteArray.new
  let bytes = input.bytes

  loop {
    match bytes.next {
      case Some(AMP) -> {
        buf.push(AMP)
        buf.push(97)
        buf.push(109)
        buf.push(112)
        buf.push(SEMI)
      }
      case Some(LT) -> {
        buf.push(AMP)
        buf.push(108)
        buf.push(116)
        buf.push(SEMI)
      }
      case Some(GT) -> {
        buf.push(AMP)
        buf.push(103)
        buf.push(116)
        buf.push(SEMI)
      }
      case Some(QUOTE) if quotes -> {
        buf.push(AMP)
        buf.push(113)
        buf.push(117)
        buf.push(111)
        buf.push(116)
        buf.push(SEMI)
      }
      case Some(byte) -> buf.push(byte)
      case _ -> return buf.into_string
    }
  }
}

# Returns `true` if the input `String` needs to be escaped.
fn escape?(input: String, quotes: Bool) -> Bool {
  let bytes = input.bytes

  loop {
    match bytes.next {
      case Some(AMP or LT or GT) -> return true
      case Some(QUOTE) if quotes -> return true
      case Some(_) -> {}
      case _ -> return false
    }
  }
}

# An XML document.
type pub Document {
  # All top-level nodes in this document.
  let pub @nodes: Array[Node]

  # Returns a new empty document.
  fn pub static new -> Document {
    Document([])
  }

  # Creates a document and passes a mutable reference to the closure, returning
  # the document afterwards.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Document
  #
  # Document.with fn (doc) {
  #   doc.element('person').with fn (person) {
  #     person.element('name')
  #   }
  # }
  # ```
  fn pub static with(func: fn (mut Document)) -> Document {
    let doc = new

    func.call(doc)
    doc
  }

  # Adds an element with the given name this document.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Document
  #
  # Document.new.element('foo')
  # ```
  fn pub mut element(name: String) -> mut Element {
    let el = Element.new(name)
    let ret = mut el

    @nodes.push(Node.Element(el))
    ret
  }

  # Returns an indented `String` containing the XML representation of `self`.
  #
  # This method uses two spaces for indentation. If you want to customize the
  # indentation, use the `Generator` type directly instead.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Document
  #
  # let doc = Document.new
  #
  # doc.element('person')
  # doc.to_pretty_string # => "<person>\n</person>"
  # ```
  fn pub to_pretty_string -> String {
    Generator.new(indent: '  ').generate(self)
  }
}

impl ToString for Document {
  # Returns a `String` containing the XML representation of `self`.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Document
  #
  # let doc = Document.new
  #
  # doc.element('person')
  # doc.to_string # => '<person></person>'
  # ```
  fn pub to_string -> String {
    Generator.new(indent: '').generate(self)
  }
}

# A node in an XML document.
type pub enum Node {
  # The node is an element, i.e. `<foo></foo>`.
  case Element(Element)

  # The node is a text node.
  case Text(String)
}

# A named XML element.
type pub Element {
  # The name of this element.
  let pub mut @name: String

  # The attributes of this element.
  let pub mut @attributes: Map[String, String]

  # The child nodes of this element.
  let pub mut @nodes: Array[Node]

  # A flag that signals this element is a self-closing element.
  let pub mut @self_closing: Bool

  # Returns a new element with the given name.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Element
  #
  # Element.new('person')
  # ```
  fn pub static new(name: String) -> Element {
    Element(name: name, attributes: Map.new, nodes: [], self_closing: false)
  }

  # Adds a child element with the given name.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Element
  #
  # Element.new('person').element('name')
  # ```
  fn pub mut element(name: String) -> mut Element {
    let el = Element.new(name)
    let ret = mut el

    @nodes.push(Node.Element(el))
    ret
  }

  # Adds an attribute to this element.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Element
  #
  # Element.new('user').attr('verified', 'true')
  # ```
  fn pub mut attr(name: String, value: String) -> mut Element {
    @attributes.set(name, value)
    self
  }

  # Calls the supplied closure, passing it a mutable reference to this element.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Element
  #
  # Element.new('person').with fn (person) {
  #   person.element('name')
  # }
  # ```
  fn pub mut with(func: fn (mut Element)) -> mut Element {
    func.call(self)
    self
  }

  # Adds a text node to this element.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Element
  #
  # Element.new('p').text('Hello!')
  # ```
  fn pub mut text(text: String) -> mut Element {
    @nodes.push(Node.Text(text))
    self
  }

  # Marks this element as being a self-closing element.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Element
  #
  # Element.new('link').self_closing
  # ```
  fn pub mut self_closing -> mut Element {
    @self_closing = true
    self
  }

  # Returns `true` if this element is a self-closing element.
  #
  # # Examples
  #
  # ```inko
  # import builder.xml.Element
  #
  # let el = Element.new('link')
  #
  # el.self_closing
  # el.self_closing? # => true
  # ```
  fn pub self_closing? -> Bool {
    @self_closing
  }
}

# A type for generating an XML `String` from a `Document`.
type pub Generator {
  let @buffer: StringBuffer
  let @indent: String

  # Returns a new `Generator` that formats the XML with the given indentation
  #
  # # Examples
  #
  # Generating XML without any indentation:
  #
  # ```inko
  # import builder.xml.(Document, Generator)
  #
  # let doc = Document.new
  #
  # doc.element('person').with fn (p) { p.element('name') }
  #
  # Generator
  #   .new(indent: '')
  #   .generate(doc) # => '<person><name></name></person>'
  # ```
  #
  # Using two spaces for indentation:
  #
  # ```inko
  # import builder.xml.(Document, Generator)
  #
  # let doc = Document.new
  #
  # doc.element('person').with fn (p) { p.element('name') }
  #
  # Generator
  #   .new(indent: '  ')
  #   .generate(doc) # => "<person>\n  <name></name>\n</person>"
  # ```
  fn pub static new(indent: String) -> Generator {
    Generator(buffer: StringBuffer.new, indent: indent)
  }

  # Returns a `String` containing the XML representation of the given document.
  fn pub move generate(document: ref Document) -> String {
    # Inko Strings are UTF-8, so by definition the generated document is also in
    # UTF-8.
    @buffer.push('<?xml version="1.0" encoding="UTF-8" ?>')

    if indent? { @buffer.push('\n') }

    for node in document.nodes.iter { node(node, depth: 0) }

    @buffer.into_string
  }

  fn mut node(node: ref Node, depth: Int) {
    match node {
      case Element(el) -> element(el, depth)
      case Text(v) -> @buffer.push(escape(v, quotes: false))
    }
  }

  fn mut element(element: ref Element, depth: Int) {
    @buffer.push('<')
    @buffer.push(element.name)

    for (key, val) in element.attributes.iter {
      @buffer.push(' ')
      @buffer.push(key)
      @buffer.push('="')
      @buffer.push(escape(val, quotes: true))
      @buffer.push('"')
    }

    if element.self_closing? and element.nodes.empty? {
      @buffer.push(' />')
      return
    }

    @buffer.push('>')

    # Whitespace inside nodes has meaning in XML, and as such we can only safely
    # indent child nodes if all of them are an element.
    let indent = if indent? {
      element.nodes.iter.all?(fn (node) {
        match node {
          case Element(_) -> true
          case _ -> false
        }
      })
    } else {
      false
    }

    if indent {
      with_indent(element.nodes, depth)
    } else {
      without_indent(element.nodes, depth)
    }

    @buffer.push('</')
    @buffer.push(element.name)
    @buffer.push('>')

    if depth == 0 and indent? { @buffer.push('\n') }
  }

  fn mut without_indent(nodes: ref Array[Node], depth: Int) {
    for child in nodes.iter { node(child, depth + 1) }
  }

  fn mut with_indent(nodes: ref Array[Node], depth: Int) {
    @buffer.push('\n')

    for (index, child) in nodes.iter.with_index {
      let add_indent = match child {
        case Element(_) -> true
        case Text(_) -> {
          match nodes.get(index - 1) {
            case Ok(Text(_)) -> false
            case _ -> true
          }
        }
      }

      let add_nl = match child {
        case Element(_) -> true
        case Text(v) -> {
          match nodes.get(index + 1) {
            case Ok(Text(_)) -> false
            case _ -> v.ends_with?('\n').false?
          }
        }
      }

      if add_indent { indent(depth + 1) }

      node(child, depth + 1)

      if add_nl { @buffer.push('\n') }
    }

    indent(depth)
  }

  fn mut indent(depth: Int) {
    depth.times(fn (_) { @buffer.push(@indent) })
  }

  fn indent? -> Bool {
    @indent.size > 0
  }
}
