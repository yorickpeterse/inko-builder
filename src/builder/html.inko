# Generating of HTML5 documents and elements.
import builder.xml (escape)
import std.string (StringBuffer, ToString)

# A container for HTML nodes
#
# A `Document` defaults to being treated as a whole HTML5 document (i.e. with a
# doctype), but this can be disabled by setting `Document.fragment` to `true`.
class pub Document {
  # All top-level nodes in this document.
  let pub @nodes: Array[Node]

  # If a doctype should be included when generating HTML.
  let @doctype: Bool

  # Returns a new empty document.
  #
  # # Examples
  #
  #     import builder.html.Document
  #
  #     let doc = Document.new
  #
  #     doc.to_string # => '<!DOCTYPE html>'
  fn pub static new -> Document {
    Document(nodes: [], doctype: true)
  }

  # Returns a new empty document that acts as a fragment.
  #
  # A fragment is an HTML document without a doctype, making it useful for
  # generating chunks of HTML meant to be included in other chunks of HTML (e.g.
  # when rendering Markdown as part of a larger document).
  #
  # # Examples
  #
  #     import builder.html.Document
  #
  #     let doc = Document.fragment
  #
  #     doc.to_string # => ''
  fn pub static fragment -> Document {
    Document(nodes: [], doctype: false)
  }

  # Returns a `Document` that containes a top-level `<html>` tag.
  #
  # The `lang` argument specifies the value of the `lang` attribute of the
  # `<html>` element.
  #
  # The `func` argument is called with a mutable reference to the top-level
  # `<html>` element.
  #
  # # Examples
  #
  #     import builder.html.Document
  #
  #     Document.html('en', fn (html) {
  #       html.head.title.text('Hello')
  #     })
  fn pub static html(lang: String, func: fn (mut Element)) -> Document {
    let doc = new

    doc.element('html').attr('lang', lang).with(func)
    doc
  }

  # Returns an indented `String` containing the HTML representation of `self`.
  #
  # This method uses two spaces for indentation. If you want to customize the
  # indentation, use the `Generator` type directly instead.
  #
  # # Examples
  #
  #     import builder.html.Document
  #
  #     let doc = Document.new
  #
  #     doc.p.text('hello')
  #     doc.to_pretty_string # => "<p>\n  hello\n</p>"
  fn pub to_pretty_string -> String {
    Generator.new(indent: '  ').generate(self)
  }
}

impl ToString for Document {
  # Returns a `String` containing the HTML representation of `self`.
  #
  # # Examples
  #
  #     import builder.html.Document
  #
  #     let doc = Document.new
  #
  #     doc.p.text('hello')
  #     doc.to_string # => '<p>hello</p>'
  fn pub to_string -> String {
    Generator.new(indent: '').generate(self)
  }
}

impl Builder for Document {
  fn pub mut nodes_mut -> mut Array[Node] {
    @nodes
  }
}

# A node in an HTML document.
class pub enum Node {
  # The node is an element, i.e. `<foo></foo>`.
  case Element(Element)

  # The node is a text node.
  case Text(String)
}

# An HTML element.
class pub Element {
  # The name of this element.
  let pub @name: String

  # The attributes of this element.
  let pub @attributes: Map[String, String]

  # The child nodes of this element.
  let pub @nodes: Array[Node]

  # If the element is a self-closing element.
  let pub @self_closing: Bool

  # If the element should be formatted as an inline element.
  let pub @inline: Bool

  # Returns a new element with the given name.
  #
  # # Examples
  #
  #     import builder.html.Element
  #
  #     Element.new('p')
  fn pub static new(name: String) -> Element {
    Element(
      name: name,
      attributes: Map.new,
      nodes: [],
      self_closing: false,
      inline: false,
    )
  }

  # Adds an attribute to this element.
  #
  # # Examples
  #
  #     import builder.html.Element
  #
  #     Element.new('user').attr('verified', 'true')
  fn pub mut attr(name: String, value: String) -> mut Element {
    @attributes.set(name, value)
    self
  }

  # Calls the supplied closure, passing it a mutable reference to this element.
  #
  # # Examples
  #
  #     import builder.html.Element
  #
  #     Element.new('person').with fn (person) {
  #       person.element('name')
  #     }
  fn pub mut with(func: fn (mut Element)) -> mut Element {
    func.call(self)
    self
  }

  # Marks this element as being a self-closing element.
  #
  # # Examples
  #
  #     import builder.html.Element
  #
  #     Element.new('link').self_closing
  fn pub mut self_closing -> mut Element {
    @self_closing = true
    self
  }

  # Marks this element as an inline element.
  fn pub mut inline -> mut Element {
    @inline = true
    self
  }

  # Returns `true` if this element is a self-closing element.
  #
  # # Examples
  #
  #     import builder.html.Element
  #
  #     let el = Element.new('link')
  #
  #     el.self_closing? # => true
  fn pub self_closing? -> Bool {
    @self_closing
  }

  # Replaces the nodes of `self` with a new empty array, returning the old
  # array of nodes.
  fn pub mut take_nodes -> Array[Node] {
    @nodes := []
  }

  # Returns `true` if HTML entities in text nodes must be escaped.
  fn escape_entities? -> Bool {
    match @name {
      case 'script' or 'style' -> false
      case _ -> true
    }
  }
}

impl Builder for Element {
  fn pub mut nodes_mut -> mut Array[Node] {
    @nodes
  }
}

# A type providing methods for building an HTML document.
trait pub Builder {
  # Returns a mutable reference to the nodes of `self`.
  fn pub mut nodes_mut -> mut Array[Node]

  # Adds the child `Element` to `self`.
  #
  # # Examples
  #
  #     import builder.html.Element
  #
  #     Element.new('p').add(Element.new('span'))
  fn pub mut add(element: Element) {
    nodes_mut.push(Node.Element(element))
  }

  # Adds the nodes of the given `Document` to `self`.
  #
  # # Examples
  #
  #     import builder.html.(Document, Element)
  #
  #     let doc1 = Document.fragment
  #     let doc2 = Document.fragment
  #
  #     doc1.p.text('test')
  #     doc2.div.append(doc1)
  #     doc2.to_string # => '<div><p>test</p></div>'
  fn pub mut append(document: Document) {
    match document {
      case { @nodes = n } -> nodes_mut.append(n)
    }
  }

  # Adds a text node to this element.
  #
  # # Examples
  #
  #     import builder.html.Element
  #
  #     Element.new('p').text('Hello!')
  fn pub mut text(text: String) {
    nodes_mut.push(Node.Text(text))
  }

  # Adds an element with the given name as a cild of `self`.
  fn pub mut element(name: String) -> mut Element {
    let el = Element.new(name)
    let ret = mut el

    add(el)
    ret
  }

  # Adds a `<a>` element as a child element.
  fn pub mut a -> mut Element {
    element('a').inline
  }

  # Adds a `<abbr>` element as a child element.
  fn pub mut abbr -> mut Element {
    element('abbr').inline
  }

  # Adds a `<address>` element as a child element.
  fn pub mut address -> mut Element {
    element('address').inline
  }

  # Adds a `<area>` element as a child element.
  fn pub mut area -> mut Element {
    element('area').self_closing.inline
  }

  # Adds a `<article>` element as a child element.
  fn pub mut article -> mut Element {
    element('article')
  }

  # Adds a `<aside>` element as a child element.
  fn pub mut aside -> mut Element {
    element('aside')
  }

  # Adds a `<audio>` element as a child element.
  fn pub mut audio -> mut Element {
    element('audio').inline
  }

  # Adds a `<b>` element as a child element.
  fn pub mut b -> mut Element {
    element('b').inline
  }

  # Adds a `<base>` element as a child element.
  fn pub mut base -> mut Element {
    element('base').self_closing
  }

  # Adds a `<bdi>` element as a child element.
  fn pub mut bdi -> mut Element {
    element('bdi')
  }

  # Adds a `<bdo>` element as a child element.
  fn pub mut bdo -> mut Element {
    element('bdo')
  }

  # Adds a `<blockquote>` element as a child element.
  fn pub mut blockquote -> mut Element {
    element('blockquote')
  }

  # Adds a `<body>` element as a child element.
  fn pub mut body -> mut Element {
    element('body')
  }

  # Adds a `<br>` element as a child element.
  fn pub mut br -> mut Element {
    element('br').self_closing
  }

  # Adds a `<button>` element as a child element.
  fn pub mut button -> mut Element {
    element('button')
  }

  # Adds a `<canvas>` element as a child element.
  fn pub mut canvas -> mut Element {
    element('canvas')
  }

  # Adds a `<caption>` element as a child element.
  fn pub mut caption -> mut Element {
    element('caption')
  }

  # Adds a `<cite>` element as a child element.
  fn pub mut cite -> mut Element {
    element('cite').inline
  }

  # Adds a `<code>` element as a child element.
  fn pub mut code -> mut Element {
    element('code').inline
  }

  # Adds a `<col>` element as a child element.
  fn pub mut col -> mut Element {
    element('col').self_closing
  }

  # Adds a `<colgroup>` element as a child element.
  fn pub mut colgroup -> mut Element {
    element('colgroup')
  }

  # Adds a `<data>` element as a child element.
  fn pub mut data -> mut Element {
    element('data')
  }

  # Adds a `<datalist>` element as a child element.
  fn pub mut datalist -> mut Element {
    element('datalist')
  }

  # Adds a `<dd>` element as a child element.
  fn pub mut dd -> mut Element {
    element('dd')
  }

  # Adds a `<del>` element as a child element.
  fn pub mut del -> mut Element {
    element('del').inline
  }

  # Adds a `<details>` element as a child element.
  fn pub mut details -> mut Element {
    element('details')
  }

  # Adds a `<dfn>` element as a child element.
  fn pub mut dfn -> mut Element {
    element('dfn').inline
  }

  # Adds a `<dialog>` element as a child element.
  fn pub mut dialog -> mut Element {
    element('dialog')
  }

  # Adds a `<div>` element as a child element.
  fn pub mut div -> mut Element {
    element('div')
  }

  # Adds a `<dl>` element as a child element.
  fn pub mut dl -> mut Element {
    element('dl')
  }

  # Adds a `<dt>` element as a child element.
  fn pub mut dt -> mut Element {
    element('dt')
  }

  # Adds a `<em>` element as a child element.
  fn pub mut em -> mut Element {
    element('em').inline
  }

  # Adds a `<embed>` element as a child element.
  fn pub mut embed -> mut Element {
    element('embed').self_closing
  }

  # Adds a `<fieldset>` element as a child element.
  fn pub mut fieldset -> mut Element {
    element('fieldset')
  }

  # Adds a `<figcaption>` element as a child element.
  fn pub mut figcaption -> mut Element {
    element('figcaption')
  }

  # Adds a `<figure>` element as a child element.
  fn pub mut figure -> mut Element {
    element('figure')
  }

  # Adds a `<footer>` element as a child element.
  fn pub mut footer -> mut Element {
    element('footer')
  }

  # Adds a `<form>` element as a child element.
  fn pub mut form -> mut Element {
    element('form')
  }

  # Adds a `<h1>` element as a child element.
  fn pub mut h1 -> mut Element {
    element('h1')
  }

  # Adds a `<h2>` element as a child element.
  fn pub mut h2 -> mut Element {
    element('h2')
  }

  # Adds a `<h3>` element as a child element.
  fn pub mut h3 -> mut Element {
    element('h3')
  }

  # Adds a `<h4>` element as a child element.
  fn pub mut h4 -> mut Element {
    element('h4')
  }

  # Adds a `<h5>` element as a child element.
  fn pub mut h5 -> mut Element {
    element('h5')
  }

  # Adds a `<h6>` element as a child element.
  fn pub mut h6 -> mut Element {
    element('h6')
  }

  # Adds a `<head>` element as a child element.
  fn pub mut head -> mut Element {
    element('head')
  }

  # Adds a `<header>` element as a child element.
  fn pub mut header -> mut Element {
    element('header')
  }

  # Adds a `<hgroup>` element as a child element.
  fn pub mut hgroup -> mut Element {
    element('hgroup')
  }

  # Adds a `<hr>` element as a child element.
  fn pub mut hr -> mut Element {
    element('hr').self_closing
  }

  # Adds a `<i>` element as a child element.
  fn pub mut i -> mut Element {
    element('i').inline
  }

  # Adds a `<iframe>` element as a child element.
  fn pub mut iframe -> mut Element {
    element('iframe')
  }

  # Adds a `<img>` element as a child element.
  fn pub mut img -> mut Element {
    element('img').self_closing.inline
  }

  # Adds a `<input>` element as a child element.
  fn pub mut input -> mut Element {
    element('input').self_closing
  }

  # Adds a `<ins>` element as a child element.
  fn pub mut ins -> mut Element {
    element('ins').inline
  }

  # Adds a `<kbd>` element as a child element.
  fn pub mut kbd -> mut Element {
    element('kbd').inline
  }

  # Adds a `<label>` element as a child element.
  fn pub mut label -> mut Element {
    element('label')
  }

  # Adds a `<legend>` element as a child element.
  fn pub mut legend -> mut Element {
    element('legend').inline
  }

  # Adds a `<li>` element as a child element.
  fn pub mut li -> mut Element {
    element('li')
  }

  # Adds a `<link>` element as a child element.
  fn pub mut link -> mut Element {
    element('link').self_closing
  }

  # Adds a `<main>` element as a child element.
  fn pub mut main -> mut Element {
    element('main')
  }

  # Adds a `<map>` element as a child element.
  fn pub mut map -> mut Element {
    element('map')
  }

  # Adds a `<mark>` element as a child element.
  fn pub mut mark -> mut Element {
    element('mark').inline
  }

  # Adds a `<menu>` element as a child element.
  fn pub mut menu -> mut Element {
    element('menu')
  }

  # Adds a `<meta>` element as a child element.
  fn pub mut meta -> mut Element {
    element('meta').self_closing
  }

  # Adds a `<meter>` element as a child element.
  fn pub mut meter -> mut Element {
    element('meter').inline
  }

  # Adds a `<nav>` element as a child element.
  fn pub mut nav -> mut Element {
    element('nav')
  }

  # Adds a `<noscript>` element as a child element.
  fn pub mut noscript -> mut Element {
    element('noscript')
  }

  # Adds a `<object>` element as a child element.
  fn pub mut object -> mut Element {
    element('object')
  }

  # Adds a `<ol>` element as a child element.
  fn pub mut ol -> mut Element {
    element('ol')
  }

  # Adds a `<optgroup>` element as a child element.
  fn pub mut optgroup -> mut Element {
    element('optgroup')
  }

  # Adds a `<option>` element as a child element.
  fn pub mut option -> mut Element {
    element('option')
  }

  # Adds a `<output>` element as a child element.
  fn pub mut output -> mut Element {
    element('output')
  }

  # Adds a `<p>` element as a child element.
  fn pub mut p -> mut Element {
    element('p')
  }

  # Adds a `<picture>` element as a child element.
  fn pub mut picture -> mut Element {
    element('picture')
  }

  # Adds a `<portal>` element as a child element.
  fn pub mut portal -> mut Element {
    element('portal')
  }

  # Adds a `<xperimental>` element as a child element.
  fn pub mut xperimental -> mut Element {
    element('xperimental')
  }

  # Adds a `<pre>` element as a child element.
  fn pub mut pre -> mut Element {
    element('pre')
  }

  # Adds a `<progress>` element as a child element.
  fn pub mut progress -> mut Element {
    element('progress')
  }

  # Adds a `<q>` element as a child element.
  fn pub mut q -> mut Element {
    element('q').inline
  }

  # Adds a `<rp>` element as a child element.
  fn pub mut rp -> mut Element {
    element('rp')
  }

  # Adds a `<rt>` element as a child element.
  fn pub mut rt -> mut Element {
    element('rt')
  }

  # Adds a `<ruby>` element as a child element.
  fn pub mut ruby -> mut Element {
    element('ruby')
  }

  # Adds a `<s>` element as a child element.
  fn pub mut s -> mut Element {
    element('s')
  }

  # Adds a `<samp>` element as a child element.
  fn pub mut samp -> mut Element {
    element('samp')
  }

  # Adds a `<script>` element as a child element.
  fn pub mut script -> mut Element {
    element('script')
  }

  # Adds a `<search>` element as a child element.
  fn pub mut search -> mut Element {
    element('search')
  }

  # Adds a `<section>` element as a child element.
  fn pub mut section -> mut Element {
    element('section')
  }

  # Adds a `<select>` element as a child element.
  fn pub mut select -> mut Element {
    element('select')
  }

  # Adds a `<slot>` element as a child element.
  fn pub mut slot -> mut Element {
    element('slot')
  }

  # Adds a `<small>` element as a child element.
  fn pub mut small -> mut Element {
    element('small').inline
  }

  # Adds a `<source>` element as a child element.
  fn pub mut source -> mut Element {
    element('source').self_closing.inline
  }

  # Adds a `<span>` element as a child element.
  fn pub mut span -> mut Element {
    element('span').inline
  }

  # Adds a `<strong>` element as a child element.
  fn pub mut strong -> mut Element {
    element('strong').inline
  }

  # Adds a `<style>` element as a child element.
  fn pub mut style -> mut Element {
    element('style')
  }

  # Adds a `<sub>` element as a child element.
  fn pub mut sub -> mut Element {
    element('sub').inline
  }

  # Adds a `<summary>` element as a child element.
  fn pub mut summary -> mut Element {
    element('summary').inline
  }

  # Adds a `<sup>` element as a child element.
  fn pub mut sup -> mut Element {
    element('sup').inline
  }

  # Adds a `<table>` element as a child element.
  fn pub mut table -> mut Element {
    element('table')
  }

  # Adds a `<tbody>` element as a child element.
  fn pub mut tbody -> mut Element {
    element('tbody')
  }

  # Adds a `<td>` element as a child element.
  fn pub mut td -> mut Element {
    element('td')
  }

  # Adds a `<template>` element as a child element.
  fn pub mut template -> mut Element {
    element('template')
  }

  # Adds a `<textarea>` element as a child element.
  fn pub mut textarea -> mut Element {
    element('textarea')
  }

  # Adds a `<tfoot>` element as a child element.
  fn pub mut tfoot -> mut Element {
    element('tfoot')
  }

  # Adds a `<th>` element as a child element.
  fn pub mut th -> mut Element {
    element('th')
  }

  # Adds a `<thead>` element as a child element.
  fn pub mut thead -> mut Element {
    element('thead')
  }

  # Adds a `<time>` element as a child element.
  fn pub mut time -> mut Element {
    element('time').inline
  }

  # Adds a `<title>` element as a child element.
  fn pub mut title -> mut Element {
    element('title')
  }

  # Adds a `<tr>` element as a child element.
  fn pub mut tr -> mut Element {
    element('tr')
  }

  # Adds a `<track>` element as a child element.
  fn pub mut track -> mut Element {
    element('track').self_closing
  }

  # Adds a `<u>` element as a child element.
  fn pub mut u -> mut Element {
    element('u')
  }

  # Adds a `<ul>` element as a child element.
  fn pub mut ul -> mut Element {
    element('ul')
  }

  # Adds a `<var>` element as a child element.
  fn pub mut var -> mut Element {
    element('var').inline
  }

  # Adds a `<video>` element as a child element.
  fn pub mut video -> mut Element {
    element('video')
  }

  # Adds a `<wbr>` element as a child element.
  fn pub mut wbr -> mut Element {
    element('wbr').self_closing
  }

  # Adds a `<xmp>` element as a child element.
  fn pub mut xmp -> mut Element {
    element('xmp')
  }
}

# A type for generating an HTML `String` from a `Document`.
class pub Generator {
  let @buffer: StringBuffer
  let @indent: String

  # Returns a new `Generator` that formats the HTML with the given indentation
  #
  # # Examples
  #
  # Generating HTML without any indentation:
  #
  #     import builder.html.(Document, Generator)
  #
  #     let doc = Document.new
  #
  #     doc.body.with fn (body) { body.p.text('hello') }
  #
  #     Generator
  #       .new(indent: '')
  #       .generate(doc) # => '<body><p>hello</p></body>'
  #
  # Using two spaces for indentation:
  #
  #     import builder.html.(Document, Generator)
  #
  #     let doc = Document.new
  #
  #     doc.body.with fn (body) { body.p.text('hello') }
  #
  #     Generator
  #       .new(indent: '  ')
  #       .generate(doc) # => "<body>\n  <p>\n    hello\n  </p>\n</body>"
  fn pub static new(indent: String) -> Generator {
    Generator(buffer: StringBuffer.new, indent: indent)
  }

  # Returns a `String` containing the HTML representation of the given document.
  fn pub move generate(document: ref Document) -> String {
    # There's not really a reason to use any other doctype for HTML5, so we just
    # don't bother supporting anything else.
    if document.doctype {
      @buffer.push('<!DOCTYPE html>')

      if indent? { @buffer.push('\n') }
    }

    document.nodes.iter.each(fn (node) { node(node, depth: 0, escape: true) })
    @buffer.into_string
  }

  fn mut node(node: ref Node, depth: Int, escape: Bool) {
    match node {
      case Element(el) -> element(el, depth)
      case Text(v) if escape -> @buffer.push(escape(v, quotes: false))
      case Text(v) -> @buffer.push(v)
    }
  }

  fn mut element(element: ref Element, depth: Int) {
    @buffer.push('<')
    @buffer.push(element.name)

    element.attributes.iter.each(fn (pair) {
      @buffer.push(' ')
      @buffer.push(pair.key)
      @buffer.push('="')
      @buffer.push(escape(pair.value, quotes: true))
      @buffer.push('"')
    })

    if element.self_closing? and element.nodes.empty? {
      @buffer.push(' />')
      closing_newline(depth)
      return
    }

    @buffer.push('>')

    let indent = if indent? {
      element.nodes.iter.any?(fn (node) {
        match node {
          case Element({ @inline = false }) -> true
          case _ -> false
        }
      })
    } else {
      false
    }

    let escape = element.escape_entities?

    if indent {
      with_indent(element.nodes, depth, escape)
    } else {
      without_indent(element.nodes, depth, escape)
    }

    @buffer.push('</')
    @buffer.push(element.name)
    @buffer.push('>')
    closing_newline(depth)
  }

  fn mut without_indent(nodes: ref Array[Node], depth: Int, escape: Bool) {
    nodes.iter.each_with_index(fn (index, child) {
      node(child, depth + 1, escape)
    })
  }

  fn mut with_indent(nodes: ref Array[Node], depth: Int, escape: Bool) {
    @buffer.push('\n')

    nodes.iter.each_with_index(fn (index, child) {
      let add_indent = match child {
        case Element({ @inline = true }) -> index == 0
        case Text(_) -> {
          match nodes.opt(index - 1) {
            case Some(Text(_) or Element({ @inline = true })) -> false
            case _ -> true
          }
        }
        case _ -> true
      }

      let add_nl = match child {
        case Element({ @inline = true }) -> {
          match nodes.opt(index + 1) {
            case Some(Element({ @inline = false })) -> true
            case _ -> false
          }
        }
        case Text(v) -> {
          match nodes.opt(index + 1) {
            case Some(Text(_) or Element({ @inline = true })) -> false
            case _ -> v.ends_with?('\n').false?
          }
        }
        case _ -> true
      }

      if add_indent { indent(depth + 1) }

      node(child, depth + 1, escape)

      if add_nl { @buffer.push('\n') }
    })

    indent(depth)
  }

  fn mut indent(depth: Int) {
    depth.times(fn (_) { @buffer.push(@indent) })
  }

  fn mut closing_newline(depth: Int) {
    if depth == 0 and indent? { @buffer.push('\n') }
  }

  fn indent? -> Bool {
    @indent.size > 0
  }
}
